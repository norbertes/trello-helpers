// Generated by CoffeeScript 1.7.1
(function() {
  var czasDoPobraniaDanych, dane, key, pobierzDane;

  dane = void 0;

  czasDoPobraniaDanych = 1000 * 60 * 5;

  key = '150b027506f6a0aae88a52c67c1a121e';

  pobierzDane = function() {
    return $.ajax({
      url: 'https://trello.com/1/members/my/cards?key=' + key + '&token=substitutethispartwiththeauthorizationtokenthatyougotfromtheuser',
      success: function(data) {
        if (typeof dane === "undefined") {
          data.map(function(row) {
            if (row.due != null) {
              return $("a[href='" + row.url.split("trello.com")[1] + "']").next(".badges").find("[class^=badge-state-due]").find(".badge-text").append(" " + row.due.split("T")[1].substr(0, 5));
            }
          });
        }
        return dane = data;
      }
    });
  };

  pobierzDane();

  setInterval(function() {
    return pobierzDane();
  }, czasDoPobraniaDanych);

  setTimeout(function() {
    var MutationObserver, observer;
    if (typeof dane !== "undefined") {
      MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
      observer = new MutationObserver(function(mutations, observer) {
        if ($("a[href='" + dane[0].url + "']").next(".badges").find("[class^=badge-state-due]").find(".badge-text").text().indexOf(":") === -1) {
          return dane.map(function(row) {
            var posDateGood, posDateHH, posDateMM;
            if (row.due != null) {
              posDateHH = row.due.split("T")[1].substr(0, 2);
              posDateMM = row.due.split("T")[1].substr(3, 2);
              posDateGood = (parseInt(posDateHH) + 2) + ":" + posDateMM;
              return $("a[href='" + row.url.split("trello.com")[1] + "']").next(".badges").find("[class^=badge-state-due]").find(".badge-text").append(" " + posDateGood);
            }
          });
        }
      });
      return observer.observe($("[class^=badge-state-due]")[0], {
        subtree: true,
        attributes: true
      });
    }
  }, 5000);

}).call(this);
